//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    /// This `R.color.ammo` struct is generated, and contains static references to 12 colors.
    struct ammo {
      /// Color `cover`.
      static let cover = Rswift.ColorResource(bundle: R.hostingBundle, name: "ammo/cover")
      /// Color `energyMain`.
      static let energyMain = Rswift.ColorResource(bundle: R.hostingBundle, name: "ammo/energyMain")
      /// Color `energySub`.
      static let energySub = Rswift.ColorResource(bundle: R.hostingBundle, name: "ammo/energySub")
      /// Color `heavyMain`.
      static let heavyMain = Rswift.ColorResource(bundle: R.hostingBundle, name: "ammo/heavyMain")
      /// Color `heavySub`.
      static let heavySub = Rswift.ColorResource(bundle: R.hostingBundle, name: "ammo/heavySub")
      /// Color `lightMain`.
      static let lightMain = Rswift.ColorResource(bundle: R.hostingBundle, name: "ammo/lightMain")
      /// Color `lightSub`.
      static let lightSub = Rswift.ColorResource(bundle: R.hostingBundle, name: "ammo/lightSub")
      /// Color `none`.
      static let none = Rswift.ColorResource(bundle: R.hostingBundle, name: "ammo/none")
      /// Color `shotgunMain`.
      static let shotgunMain = Rswift.ColorResource(bundle: R.hostingBundle, name: "ammo/shotgunMain")
      /// Color `shotgunSub`.
      static let shotgunSub = Rswift.ColorResource(bundle: R.hostingBundle, name: "ammo/shotgunSub")
      /// Color `sniperMain`.
      static let sniperMain = Rswift.ColorResource(bundle: R.hostingBundle, name: "ammo/sniperMain")
      /// Color `sniperSub`.
      static let sniperSub = Rswift.ColorResource(bundle: R.hostingBundle, name: "ammo/sniperSub")

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "cover", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func cover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.ammo.cover, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "energyMain", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func energyMain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.ammo.energyMain, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "energySub", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func energySub(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.ammo.energySub, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "heavyMain", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func heavyMain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.ammo.heavyMain, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "heavySub", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func heavySub(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.ammo.heavySub, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "lightMain", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func lightMain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.ammo.lightMain, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "lightSub", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func lightSub(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.ammo.lightSub, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "none", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func none(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.ammo.none, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "shotgunMain", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func shotgunMain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.ammo.shotgunMain, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "shotgunSub", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func shotgunSub(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.ammo.shotgunSub, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "sniperMain", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func sniperMain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.ammo.sniperMain, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "sniperSub", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func sniperSub(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.ammo.sniperSub, compatibleWith: traitCollection)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "cover", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func cover(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.ammo.cover.name)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "energyMain", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func energyMain(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.ammo.energyMain.name)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "energySub", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func energySub(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.ammo.energySub.name)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "heavyMain", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func heavyMain(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.ammo.heavyMain.name)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "heavySub", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func heavySub(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.ammo.heavySub.name)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "lightMain", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func lightMain(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.ammo.lightMain.name)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "lightSub", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func lightSub(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.ammo.lightSub.name)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "none", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func none(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.ammo.none.name)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "shotgunMain", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func shotgunMain(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.ammo.shotgunMain.name)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "shotgunSub", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func shotgunSub(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.ammo.shotgunSub.name)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "sniperMain", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func sniperMain(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.ammo.sniperMain.name)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "sniperSub", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func sniperSub(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.ammo.sniperSub.name)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.color.border` struct is generated, and contains static references to 2 colors.
    struct border {
      /// Color `primary`.
      static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "border/primary")
      /// Color `secondary`.
      static let secondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "border/secondary")

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.border.primary, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func secondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.border.secondary, compatibleWith: traitCollection)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func primary(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.border.primary.name)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func secondary(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.border.secondary.name)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.color.foreground` struct is generated, and contains static references to 2 colors.
    struct foreground {
      /// Color `primary`.
      static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "foreground/primary")
      /// Color `secondary`.
      static let secondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "foreground/secondary")

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.foreground.primary, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func secondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.foreground.secondary, compatibleWith: traitCollection)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func primary(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.foreground.primary.name)
      }
      #endif

      #if os(watchOS)
      /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
      @available(watchOSApplicationExtension 4.0, *)
      static func secondary(_: Void = ()) -> UIKit.UIColor? {
        return UIKit.UIColor(named: R.color.foreground.secondary.name)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    /// This `R.image.character` struct is generated, and contains static references to 24 images.
    struct character {
      /// Image `assyu`.
      static let assyu = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/assyu")
      /// Image `bangaroru`.
      static let bangaroru = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/bangaroru")
      /// Image `banteji`.
      static let banteji = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/banteji")
      /// Image `bloodhound`.
      static let bloodhound = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/bloodhound")
      /// Image `hatena`.
      static let hatena = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/hatena")
      /// Image `horaizon`.
      static let horaizon = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/horaizon")
      /// Image `hyuzu`.
      static let hyuzu = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/hyuzu")
      /// Image `jiburarutaru`.
      static let jiburarutaru = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/jiburarutaru")
      /// Image `katarisuto`.
      static let katarisuto = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/katarisuto")
      /// Image `kosuthikku`.
      static let kosuthikku = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/kosuthikku")
      /// Image `kuriputo`.
      static let kuriputo = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/kuriputo")
      /// Image `maddomagi`.
      static let maddomagi = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/maddomagi")
      /// Image `miraju`.
      static let miraju = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/miraju")
      /// Image `nyukyassuru`.
      static let nyukyassuru = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/nyukyassuru")
      /// Image `okutan`.
      static let okutan = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/okutan")
      /// Image `pasufainnda`.
      static let pasufainnda = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/pasufainnda")
      /// Image `raifurain`.
      static let raifurain = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/raifurain")
      /// Image `rannpato`.
      static let rannpato = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/rannpato")
      /// Image `rebunannto`.
      static let rebunannto = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/rebunannto")
      /// Image `reisu`.
      static let reisu = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/reisu")
      /// Image `roba`.
      static let roba = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/roba")
      /// Image `sia`.
      static let sia = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/sia")
      /// Image `varukiri`.
      static let varukiri = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/varukiri")
      /// Image `wattoson`.
      static let wattoson = Rswift.ImageResource(bundle: R.hostingBundle, name: "character/wattoson")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "assyu", bundle: ..., traitCollection: ...)`
      static func assyu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.assyu, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "bangaroru", bundle: ..., traitCollection: ...)`
      static func bangaroru(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.bangaroru, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "banteji", bundle: ..., traitCollection: ...)`
      static func banteji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.banteji, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "bloodhound", bundle: ..., traitCollection: ...)`
      static func bloodhound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.bloodhound, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "hatena", bundle: ..., traitCollection: ...)`
      static func hatena(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.hatena, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "horaizon", bundle: ..., traitCollection: ...)`
      static func horaizon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.horaizon, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "hyuzu", bundle: ..., traitCollection: ...)`
      static func hyuzu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.hyuzu, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "jiburarutaru", bundle: ..., traitCollection: ...)`
      static func jiburarutaru(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.jiburarutaru, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "katarisuto", bundle: ..., traitCollection: ...)`
      static func katarisuto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.katarisuto, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "kosuthikku", bundle: ..., traitCollection: ...)`
      static func kosuthikku(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.kosuthikku, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "kuriputo", bundle: ..., traitCollection: ...)`
      static func kuriputo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.kuriputo, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "maddomagi", bundle: ..., traitCollection: ...)`
      static func maddomagi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.maddomagi, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "miraju", bundle: ..., traitCollection: ...)`
      static func miraju(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.miraju, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "nyukyassuru", bundle: ..., traitCollection: ...)`
      static func nyukyassuru(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.nyukyassuru, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "okutan", bundle: ..., traitCollection: ...)`
      static func okutan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.okutan, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "pasufainnda", bundle: ..., traitCollection: ...)`
      static func pasufainnda(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.pasufainnda, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "raifurain", bundle: ..., traitCollection: ...)`
      static func raifurain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.raifurain, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "rannpato", bundle: ..., traitCollection: ...)`
      static func rannpato(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.rannpato, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "rebunannto", bundle: ..., traitCollection: ...)`
      static func rebunannto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.rebunannto, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "reisu", bundle: ..., traitCollection: ...)`
      static func reisu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.reisu, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "roba", bundle: ..., traitCollection: ...)`
      static func roba(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.roba, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "sia", bundle: ..., traitCollection: ...)`
      static func sia(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.sia, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "varukiri", bundle: ..., traitCollection: ...)`
      static func varukiri(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.varukiri, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "wattoson", bundle: ..., traitCollection: ...)`
      static func wattoson(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.character.wattoson, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 8 localization keys.
    struct localizable {
      /// Value: START
      static let rouletet_start = Rswift.StringResource(key: "rouletet_start", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: アモ選択
      static let ammo_pick = Rswift.StringResource(key: "ammo_pick", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: エネルギーアモ
      static let energy_ammo = Rswift.StringResource(key: "energy_ammo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: キャラ選択
      static let character_pick = Rswift.StringResource(key: "character_pick", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ショットガンアモ
      static let shotgun_ammo = Rswift.StringResource(key: "shotgun_ammo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: スナイパーアモ
      static let sniper_ammo = Rswift.StringResource(key: "sniper_ammo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ヘビーアモ
      static let heavy_ammo = Rswift.StringResource(key: "heavy_ammo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ライトアモ
      static let light_ammo = Rswift.StringResource(key: "light_ammo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: START
      static func rouletet_start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rouletet_start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rouletet_start"
        }

        return NSLocalizedString("rouletet_start", bundle: bundle, comment: "")
      }

      /// Value: アモ選択
      static func ammo_pick(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ammo_pick", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ammo_pick"
        }

        return NSLocalizedString("ammo_pick", bundle: bundle, comment: "")
      }

      /// Value: エネルギーアモ
      static func energy_ammo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_ammo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_ammo"
        }

        return NSLocalizedString("energy_ammo", bundle: bundle, comment: "")
      }

      /// Value: キャラ選択
      static func character_pick(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("character_pick", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "character_pick"
        }

        return NSLocalizedString("character_pick", bundle: bundle, comment: "")
      }

      /// Value: ショットガンアモ
      static func shotgun_ammo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shotgun_ammo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shotgun_ammo"
        }

        return NSLocalizedString("shotgun_ammo", bundle: bundle, comment: "")
      }

      /// Value: スナイパーアモ
      static func sniper_ammo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sniper_ammo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sniper_ammo"
        }

        return NSLocalizedString("sniper_ammo", bundle: bundle, comment: "")
      }

      /// Value: ヘビーアモ
      static func heavy_ammo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("heavy_ammo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "heavy_ammo"
        }

        return NSLocalizedString("heavy_ammo", bundle: bundle, comment: "")
      }

      /// Value: ライトアモ
      static func light_ammo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("light_ammo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "light_ammo"
        }

        return NSLocalizedString("light_ammo", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
